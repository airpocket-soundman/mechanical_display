from machine import I2C
import time
import pca9685
import servo



#displayのUnit配置数定義
UnitLayout = [2,2]          #[width,height]　現在は[4,4]まで対応。増やす際は、I2Cのaddressリストも修正が必要。

#UnitのI2C addressのリスト定義
UnitAddressList = [[64, 65, 66, 67],
                   [68, 69, 70, 71],
                   [72, 73, 74, 75],
                   [76, 77, 78, 79]]

#UnitのIDのリスト定義
UnitIDList = []
n = 0
for i in range(UnitLayout[0]):
    list=[]
    for j in range(UnitLayout[1]):
        list.append(n)
        n += 1
    UnitIDList.append(list)
print("UnitIDList:",UnitIDList)

"""
UnitIDList = [[ 0,  1,  2,  3],
              [ 4,  5,  6,  7],
              [ 8,  9, 10, 11],
              [12, 13, 14, 15]]
"""
"""
UnitID = [[0x40, 0x41, 0x42, 0x43],
          [0x44, 0x45, 0x46, 0x47],
          [0x48, 0x49, 0x4a, 0x4b],
          [0x4c, 0x4d, 0x4e, 0x4f]]
"""

#Unit内のPixel位置とサーボIDの対応を定義
UnitPixelIDList = [[ 0,  1,  2,  3],
                   [ 4,  5,  6,  7],
                   [ 8,  9, 10, 11],
                   [12, 13, 14, 15]]

#UnitIDListとUnitPixelIDListから、displayのPixelとUnitID,各ユニットのPixelIDを対応させるPixelIDListを生成する
PixelIDList = []

for i in range(UnitLayout[1]):
    for k in range(4):
        list = []
        for j in  range(UnitLayout[0]):
            UnitID = UnitIDList[i][j]
            #print(UnitID)
            for l in range(4):
                list.append([UnitID,UnitPixelIDList[k][l]])
        #print(list)
        PixelIDList.append(list)

print("PixelIDList:")

for i in range(len(PixelIDList)):
    print(PixelIDList[i])

# サーボのキャリブレーションデータ 4*4ユニット対応版
usCenter=[[1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500],
          [1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500],
          [1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500],
          [1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500],

          [1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500],
          [1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500],
          [1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500],
          [1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500],

          [1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500],
          [1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500],
          [1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500],
          [1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500],

          [1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500],
          [1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500],
          [1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500],
          [1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500,  1500, 1500, 1500, 1500]]


usMax   =[[1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900],
          [1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900],
          [1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900],
          [1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900],

          [1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900],
          [1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900],
          [1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900],
          [1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900],

          [1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900],
          [1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900],
          [1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900],
          [1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900],

          [1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900],
          [1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900],
          [1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900],
          [1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900,  1900, 1900, 1900, 1900]]


usMin   =[[1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100],
          [1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100],
          [1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100],
          [1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100],

          [1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100],
          [1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100],
          [1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100],
          [1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100],

          [1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100],
          [1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100],
          [1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100],
          [1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100],

          [1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100],
          [1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100],
          [1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100],
          [1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100,  1100, 1100, 1100, 1100],]


#I2C　初期化
i2c = I2C(I2C.I2C0, freq=100000, scl=34, sda=35)

#I2C 接続されているユニットのアドレス確認
addr = i2c.scan()
print( "address is :" + str(addr) )

#サーボドライバインスタンス格納用リスト
pca = []

#サーボドライバ初期化
for i in range(UnitLayout[1]):
    for j in range(UnitLayout[0]):
        pca.append(servo.Servos(i2c, address = UnitAddressList[i][j]))
        print(UnitIDList[i][j])

pca[UnitIDList[0][0]].position(PixelIDList[0][0][1], us=usMax[0][0])
time.sleep_ms(100)
pca[UnitIDList[0][0]].position(PixelIDList[0][0][1], us=usCenter[0][0])


for i in range(UnitLayout[1]*4):
    for j in range(UnitLayout[0]*4):
#        print("UnitNo:",i)
#        print("ServoNo:",PixelIDList[i][j][1])
        pca[PixelIDList[i][j][0]].position(PixelIDList[i][j][1], us=usMax[i][j])
        time.sleep_ms(50)
#        pca[PixelIDList[i][j][0]].release(PixelIDList[i][j][1])
#        time.sleep_ms(50)
        pca[PixelIDList[i][j][0]].position(PixelIDList[i][j][1], us=usCenter[i][j])
        time.sleep_ms(50)
        pca[PixelIDList[i][j][0]].release(PixelIDList[i][j][1])

for j in range(UnitLayout[1]*4):
    for i in range(UnitLayout[0]*4):
#        print("UnitNo:",i)
#        print("ServoNo:",PixelIDList[i][j][1])
        pca[PixelIDList[i][j][0]].position(PixelIDList[i][j][1], us=usMin[i][j])
        time.sleep_ms(100)
#        pca[PixelIDList[i][j][0]].release(PixelIDList[i][j][1])
#        time.sleep_ms(50)
        pca[PixelIDList[i][j][0]].position(PixelIDList[i][j][1], us=usCenter[i][j])
        time.sleep_ms(50)
        pca[PixelIDList[i][j][0]].release(PixelIDList[i][j][1])
"""
for i in range(UnitLayout[1]*4):
    for j in range(UnitLayout[0]*4):
        pca[PixelIDList[i][j][0]].position(PixelIDList[i][j][1], us=usMax[i][j])
        pca[PixelIDList[i][j][0]].release(PixelIDList[i][j][1])
time.sleep_ms(1000)

for i in range(UnitLayout[1]*4):
    for j in range(UnitLayout[0]*4):
        pca[PixelIDList[i][j][0]].position(PixelIDList[i][j][1], us=usMin[i][j])
        pca[PixelIDList[i][j][0]].release(PixelIDList[i][j][1])
time.sleep_ms(1000)

for i in range(UnitLayout[1]*4):
    for j in range(UnitLayout[0]*4):
        pca[PixelIDList[i][j][0]].position(PixelIDList[i][j][1], us=usCenter[i][j])
        pca[PixelIDList[i][j][0]].release(PixelIDList[i][j][1])
time.sleep_ms(1000)
"""
